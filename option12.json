{
  "emoji": "📉",
  "name": {
    "en": "Status Ailment - Change Stat Change Decay",
    "ja": "状態異常 - ステータス変化の減衰変更"
  },
  "description": {
    "en": "Adjust the % decay that occurs at the start of every turn with status conditions. Bakin default is 0.8, so status ailments bonuses lose 20% of their boosts/reductions every turn. Set to 1 to keep stat changes identical every turn.",
    "ja": "毎ターン開始時に状態異常によるステータス変化の減衰率を調整します。Bakinのデフォルトは0.8で、状態異常のボーナスは毎ターン20%減少します。1に設定するとステータス変化が毎ターン変わりません。"
  },
  "file": "BattleSequenceManager",
  "insertAfter": "private void UpdateBattleState_PlayerTurnStart",
  "isFunctionReplacement": true,
  "parameters": {
    "playerDampening": 0.8,
    "enemyDampening": 0.8
  },
  "code": "private void UpdateBattleState_PlayerTurnStart()\n        {\n            recoveryStatusInfo.Clear();\n\n            // 1回目のコマンド選択時のみ 状態異常回復判定 & 強化用ステータス減衰\n            // Only when the command is selected for the first time Status abnormality recovery judgment & strengthening status attenuation\n            foreach (var character in createBattleCharacterList())\n            {\n                // 状態異常 回復判定\n                // Status Abnormal Recovery Judgment\n                var recoveryList = new List<Hero.ConditionInfo>(character.conditionInfoDic.Count);\n\n                foreach (var e in character.conditionInfoDic)\n                {\n                    var info = e.Value;\n\n                    if ((info.recovery & Hero.ConditionInfo.RecoveryType.Probability) != 0)\n                    {\n                        if (battleRandom.Next(100) < info.probabilityRate)\n                        {\n                            recoveryList.Add(info);\n\n                            continue;\n                        }\n                    }\n\n                    if ((info.recovery & Hero.ConditionInfo.RecoveryType.Turn) != 0)\n                    {\n                        info.turnCount--;\n\n                        if (info.turnCount <= 0)\n                        {\n                            recoveryList.Add(info);\n\n                            continue;\n                        }\n                    }\n                }\n\n                foreach (var info in recoveryList)\n                {\n                    character.RecoveryCondition(info.condition, battleEvents, Rom.Condition.RecoveryType.Terms);\n\n                    if (info.rom != null)\n                    {\n                        recoveryStatusInfo.Add(new RecoveryStatusInfo(character, info.rom));\n\n                        SetNextBattleStatus(character);\n                    }\n                }\n            }\n\n            foreach (var player in playerData)\n            {\n                UpdateEnhanceEffect(player.attackEnhanceEffects);\n                UpdateEnhanceEffect(player.guardEnhanceEffects);\n\n                // 強化用のステータスを減衰させる\n                // Attenuates stats for enhancement\n                const float DampingRate = /* PLAYER DAMPENING */;\n                player.MaxHitPointEnhance = (int)(player.MaxHitPointEnhance * DampingRate);\n                player.MaxMagicPointEnhance = (int)(player.MaxMagicPointEnhance * DampingRate);\n                player.PowerEnhancement = (int)(player.PowerEnhancement * DampingRate);\n                player.VitalityEnhancement = (int)(player.VitalityEnhancement * DampingRate);\n                player.MagicEnhancement = (int)(player.MagicEnhancement * DampingRate);\n                player.SpeedEnhancement = (int)(player.SpeedEnhancement * DampingRate);\n                player.EvasionEnhancement = (int)(player.EvasionEnhancement * DampingRate);\n                player.DexterityEnhancement = (int)(player.DexterityEnhancement * DampingRate);\n\n                player.enhanceStatusValue.MulStatusAll(DampingRate);\n\n                foreach (var element in player.ResistanceAttackAttributeEnhance.Keys.ToArray())\n                {\n                    player.ResistanceAttackAttributeEnhance[element] = (int)(player.ResistanceAttackAttributeEnhance[element] * DampingRate);\n                }\n\n                foreach (var element in player.ResistanceAilmentEnhance.Keys.ToArray())\n                {\n                    player.ResistanceAilmentEnhance[element] = (int)(player.ResistanceAilmentEnhance[element] * DampingRate);\n                }\n\n                SetBattleStatusData(player, true);\n\n                battleViewer.SetPlayerStatusEffect(player);\n            }\n\n            foreach (var monster in enemyData)\n            {\n                // 強化用のステータスを減衰させる\n                // Attenuates stats for enhancement\n                const float DampingRate = /* ENEMY DAMPENING */;\n                monster.MaxHitPointEnhance = (int)(monster.MaxHitPointEnhance * DampingRate);\n                monster.MaxMagicPointEnhance = (int)(monster.MaxMagicPointEnhance * DampingRate);\n                monster.PowerEnhancement = (int)(monster.PowerEnhancement * DampingRate);\n                monster.VitalityEnhancement = (int)(monster.VitalityEnhancement * DampingRate);\n                monster.MagicEnhancement = (int)(monster.MagicEnhancement * DampingRate);\n                monster.SpeedEnhancement = (int)(monster.SpeedEnhancement * DampingRate);\n                monster.EvasionEnhancement = (int)(monster.EvasionEnhancement * DampingRate);\n                monster.DexterityEnhancement = (int)(monster.DexterityEnhancement * DampingRate);\n\n                monster.enhanceStatusValue.MulStatusAll(DampingRate);\n\n                foreach (var element in monster.ResistanceAttackAttributeEnhance.Keys.ToArray())\n                {\n                    monster.ResistanceAttackAttributeEnhance[element] = (int)(monster.ResistanceAttackAttributeEnhance[element] * DampingRate);\n                }\n\n                foreach (var element in monster.ResistanceAilmentEnhance.Keys.ToArray())\n                {\n                    monster.ResistanceAilmentEnhance[element] = (int)(monster.ResistanceAilmentEnhance[element] * DampingRate);\n                }\n            }\n\n            UpdatePosition();\n            ChangeBattleState(BattleState.CheckTurnRecoveryStatus);\n        }"
}