{
  "emoji": "📷",
  "name": {
    "en": "Player Decision: Additional Cameras",
    "ja": "プレイヤー決定：追加カメラ"
  },
  "description": {
    "en": "Overrides the Update function to add custom camera animations for player decisions, ally targeting, and enemy targeting.",
    "ja": "プレイヤー決定、味方ターゲティング、敵ターゲティングのためのカスタムカメラアニメーションを追加するためにUpdate関数をオーバーライドします。"
  },
  "file": "BattleViewer3D",
  "insertAfter": "internal override void Update",
  "isFunctionReplacement": true,
  "parameters": {
    "playerDec": "",
    "allyTarget": "",
    "enemyTarget": ""
  },
  "code": "        // Determine the desired camera animation\n        private string currentCameraAnimationGUID;\n\n        // バグ修正 / BUG FIX\n        // The commented out line caused Attack/Escape and other attacks to softlock.\n        // コメントアウトされた行は、アタック／エスケープやその他の攻撃がソフトロックする原因となっていた。\n        public void PlayCustomCameraAnimationGUID(string cam_guid_string)\n        {\n            StopCameraAnimation();\n            camManager.setCameraFromGuid(catalog, new Guid(cam_guid_string));\n            //camManager.playAnimation();\n        }\n\n        internal override void Update(List<BattlePlayerData> playerData, List<BattleEnemyData> enemyMonsterData)\n        {\n            base.Update(playerData, enemyMonsterData);\n\n            if (mapDrawer.currentRom == null)\n                return;\n\n            Quaternion qt = camManager.camQuat;\n            Vector3 rot = new Vector3();\n            camManager.convQuaternionToRotation(qt, out rot);\n            float angleY = rot.Y;\n            mapDrawer.Update(GameMain.getElapsedTime());\n\n            foreach (var entry in turnChr)\n            {\n                entry?.setVisibility(false);\n            }\n\n            UpdateBattleActors(friends, angleY, true);\n\n            foreach (var mapChr in extras)\n            {\n                mapChr.Update(mapDrawer, angleY, false);\n            }\n\n            UpdateBattleActors(enemies, angleY, false);\n\n            // Move camera according to battle state\n            if (game.data.system.BattleCameraEnabled[Common.GameData.SystemData.BATTLE_CAMERA_SITUATION_RESULT] &&\n                owner.battleState == BattleState.Result &&\n                oldState != BattleState.Result)\n            {\n                PlayCameraAnimation(Rom.Camera.NAME_BATTLE_RESULT);\n            }\n\n            if (owner.battleState == BattleState.WaitEventsBeforeCommandSelect && \n                oldState != BattleState.WaitEventsBeforeCommandSelect)\n            {\n                StopCameraAnimation(); // Ensure any ongoing animation is stopped\n                camManager.setWaitFunc(null); // Clear any wait function\n                currentCameraAnimationGUID = null; // Clear current animation to force update\n            }\n\n            // Let each character act according to the state\n            for (int i = 0; i < playerData.Count; i++)\n            {\n                var friend = searchFromActors(playerData[i]);\n\n                if (friend == null)\n                    continue;\n\n                playerData[i].statusWindowDrawPosition = friend.getScreenPos(p, v, MapScene.EffectPosType.Head);\n\n                Vector3 neutralPos = friend.mapChr.pos;\n\n                if (i < turnChr.Length)\n                    turnChr[i]?.setPosture(SharpKmyMath.Matrix4.translate(neutralPos.X, neutralPos.Y, neutralPos.Z));\n\n                if (owner.battleState == BattleState.PlayerEscapeSuccess)\n                {\n                    friend.queueActorState(BattleActor.ActorStateType.ESCAPE);\n                    continue;\n                }\n\n                if (owner.battleState == BattleState.Result)\n                {\n                    friend.queueActorState(BattleActor.ActorStateType.WIN);\n                    continue;\n                }\n\n                updateConditionEffectAndMotion(friend);\n\n                if (owner.battleState >= BattleState.WaitEventsBeforeCommandSelect &&\n                    owner.battleState <= BattleState.SortBattleActions)\n                {\n                    if (playerData[i] == owner.commandSelectPlayer)\n                    {\n                        turnChr[i]?.setVisibility(true);\n                        skillUser = friend;\n                        if (!friend.isActorStateQueued(BattleActor.ActorStateType.START_COMMAND_SELECT) &&\n                            friend.getActorState() != BattleActor.ActorStateType.START_COMMAND_SELECT &&\n                            friend.getActorState() != BattleActor.ActorStateType.COMMAND_SELECT)\n                        {\n                            friend.queueActorState(BattleActor.ActorStateType.START_COMMAND_SELECT);\n                            friend.queueActorState(BattleActor.ActorStateType.COMMAND_SELECT);\n                            continue;\n                        }\n                    }\n                    else\n                    {\n                        if (!friend.isActorStateQueued(BattleActor.ActorStateType.BACK_TO_WAIT) &&\n                            (friend.getActorState() == BattleActor.ActorStateType.START_COMMAND_SELECT ||\n                            friend.getActorState() == BattleActor.ActorStateType.COMMAND_SELECT))\n                        {\n                            friend.queueActorState(BattleActor.ActorStateType.BACK_TO_WAIT);\n                            friend.queueActorState(BattleActor.ActorStateType.COMMAND_STANDBY);\n                            continue;\n                        }\n                    }\n                }\n            }\n\n            // Determine the desired camera animation\n            string desiredCameraAnimation = null;\n\n            if (displayWindow == WindowType.CommandTargetMonsterListWindow)\n            {\n                var selectedMonster = enemyMonsterData.FirstOrDefault(m => m.IsSelect);\n                if (selectedMonster != null)\n                {\n                    skillUser = searchFromActors(selectedMonster);\n                    desiredCameraAnimation = \"/* ENEMY TARGET */\"; // ENEMY TARGET\n                }\n                else\n                {\n                    skillUser = friends[0];\n                    desiredCameraAnimation = \"/* PLAYER DEC */\"; // PLAYER DEC\n                }\n            }\n            else if (displayWindow == WindowType.CommandTargetPlayerListWindow)\n            {\n                var selectedPlayer = playerData.FirstOrDefault(p => p.IsSelect);\n                if (selectedPlayer != null)\n                {\n                    skillUser = searchFromActors(selectedPlayer);\n                    desiredCameraAnimation = \"/* ALLY TARGET */\"; // ALLY TARGET\n                }\n                else\n                {\n                    skillUser = friends[0];\n                    desiredCameraAnimation = \"/* PLAYER DEC */\"; // PLAYER DEC\n                }\n            }\n            else if (owner.battleState >= BattleState.WaitEventsBeforeCommandSelect &&\n                    owner.battleState <= BattleState.SortBattleActions)\n            {\n                desiredCameraAnimation = \"/* PLAYER DEC */\"; // PLAYER DEC\n            }\n\n            // Play the custom camera animation only if it has changed\n            if (desiredCameraAnimation != null && desiredCameraAnimation != currentCameraAnimationGUID)\n            {\n                // Explicitly stop the current animation before playing a new one\n                PlayCustomCameraAnimationGUID(desiredCameraAnimation);\n                currentCameraAnimationGUID = desiredCameraAnimation;\n            }\n\n            // Let monsters act according to the state\n            for (int i = 0; i < enemyMonsterData.Count; i++)\n            {\n                var actor = searchFromActors(enemyMonsterData[i]);\n                if (actor == null)\n                    continue;\n\n                updateConditionEffectAndMotion(actor);\n            }\n\n            oldState = owner.battleState;\n        }"
}