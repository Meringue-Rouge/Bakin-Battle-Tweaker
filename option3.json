{
  "emoji": "⚡",
  "name": {
    "en": "Priority Attacks",
    "ja": "優先攻撃"
  },
  "description": {
    "en": "Adds attack speed priorities: skills tagged #highpriority will always go first, #lowpriority always last, and untagged attacks in between, all sorted by speed.",
    "ja": "攻撃速度の優先順位が追加される。#highpriorityとタグ付けされたスキルは常に最初、#lowpriorityは常に最後、そしてタグ付けされていない攻撃はその中間で、すべて速度順にソートされる。"
  },
  "file": "BattleSequenceManager",
  "insertAfter": "UpdateBattleState_SortBattleActions",
  "isFunctionReplacement": true,
  "code": "private void UpdateBattleState_SortBattleActions()\n        {\n\n            if (battleEvents.isBusy())\n                return;\n            battleEvents.clearCurrentProcessingTrigger();\n\n            commandExecuteMemberCount = 0;\n\n            // Create the initial character list, excluding those with Nothing_Down command\n            // Nothing_Downコマンドを持つ文字を除いた初期文字リストを作成する。\n            var characters = createBattleCharacterList()\n                .Where(character => character.selectedBattleCommandType != BattleCommandType.Nothing_Down)\n                .ToList();\n\n            // Add actions for escape and guard commands (existing priorities)\n            // エスケープコマンドとガードコマンドのアクションを追加（既存の優先順位）\n            AddBattleActionEntry(characters.Where(character => character.selectedBattleCommandType == BattleCommandType.PlayerEscape));\n            AddBattleActionEntry(characters.Where(character => character.selectedBattleCommandType == BattleCommandType.MonsterEscape));\n            AddBattleActionEntry(characters.Where(character => character.selectedBattleCommandType == BattleCommandType.Guard)\n                .OrderBy(character => character.UniqueID));\n\n            // Filter out characters already added (those with escape or guard commands)\n            // すでに追加された文字（エスケープやガードコマンドを含む文字）を除外する。\n            var remainingCharacters = characters\n                .Where(character => !battleEntryCharacters.Exists(x => x.character == character))\n                .ToList();\n\n            // Tier 1: #highpriority (highest priority, sorted by Speed)\n            // ティア1：#highpriority（最優先、スピード順）\n            var pastCharacters = remainingCharacters\n                .Where(character => character.selectedSkill?.tags?.Contains(\"#highpriority\") ?? false)\n                .OrderByDescending(character => character.Speed);\n            AddBattleActionEntry(pastCharacters);\n\n            // Tier 2: Normal skills (no #highpriority or #lowpriority, sorted by Speed)\n            // ティア2：ノーマルスキル（#highpriority、#lowpriorityなし、スピード順）\n            var normalCharacters = remainingCharacters\n                .Where(character => \n                    !(character.selectedSkill?.tags?.Contains(\"#highpriority\") ?? false) &&\n                    !(character.selectedSkill?.tags?.Contains(\"#lowpriority\") ?? false))\n                .OrderByDescending(character => character.Speed);\n            AddBattleActionEntry(normalCharacters);\n\n            // Tier 3: #future (lowest priority, sorted by Speed)\n            // ティア3：#future（優先順位が最も低い、スピード順）\n            var futureCharacters = remainingCharacters\n                .Where(character => character.selectedSkill?.tags?.Contains(\"#lowpriority\") ?? false)\n                .OrderByDescending(character => character.Speed);\n            AddBattleActionEntry(futureCharacters);\n\n            ChangeBattleState(BattleState.ReadyExecuteCommand);\n        }"
}